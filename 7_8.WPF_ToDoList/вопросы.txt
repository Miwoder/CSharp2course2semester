Перечислите преимущества и недостатки WPF?
Плюсы WPF:
1) Абсолютное разделение графики и логики программы. Мы можем писать алгоритмы совсем не думая о графическом интерфейсе.
2) Мощный инструмент привязки данных(он есть и в WinForms, но в WPF он более гибкий).
3) Полная свобода в контролах. базовых компонентов более чем достаточно чтобы сделать что угодно и в каком угодно виде.
4) использование DirectX а не GDI+. В результате снижаем загруженность процессора и можем использовать очень красивые графические эффекты.
Недостатки WPF
1) потребляет до 50% больше памяти
2) необходимо разбираться в XAML. и чем больше хочешь от него получить - тем больше заморочек
3) не хватает простоты WinForms - зачастую недостаточно перетянуть контрол с панели инструментов на форму - надо дорабатывать в XAML напрямую.
Зачем нужен язык XAML? Каким образом он используется в WPF
XAML — это язык разметки, который появился вместе с первой версией WPF от Microsoft. Декларативные языки, в обратную сторону, позволяют нам описать состояние, которого мы хотим добиться, но не требуют (и обычно не дают) описать как прийти в это состояние
Какие бывают контейнеры компоновки?
Все контейнеры компоновки WPF являются панелями, которые унаследованы от абстрактного класса System.Windows.Controls.Panel
Grid
Выстраивает элементы в строки и колонки невидимой таблицы. Это один из наиболее гибких и широко используемых контейнеров компоновки
 Перечислите основные группы элементов управления. Расскажите про объектную модель WPF
Объясните назначение класса DependencyProperty. Зачем нужны свойства зависимостей? Как создать новой свойство зависимости и в каких случаях это необходимо?
Без свойств зависимостей были бы невозможны многие ключевые особенности WPF, как привязка данных, стили
DependencyObjects are not marked as serializable
The DependencyObject class overrides and seals the Equals() and GetHashCode() methods
A DependencyObject has thread affinity – it can only be accessed on the thread on which it was created

Каким образом осуществляется обработка событий в WPF? Что означает концепция маршрутизированных событий? Перечислите основные группы событий.
WPF в отличие от других технологий, например, от Windows Forms, предлагает новую концепцию событий - маршрутизированные события (routed events).
Для элементов управления в WPF определено большое количество событий, которые условно можно разделить на несколько групп:
События клавиатуры
События мыши
События стилуса
События сенсорного экрана/мультитач
События жизненного цикла

Что такое Resource Dictionary?
Они повышают эффективность: мы можем определить один раз какой-либо ресурс и затем многократно использовать его в различных местах приложения. В связи с этим улучшается поддержка - если возникнет необходимость изменить ресурс, достаточно это сделать в одном месте, и изменения произойдут глобально в приложении.
словарь ресурсов, где каждый хранящийся ресурс имеет определенный ключ.
Что такое стиль и как его создать? В чем преимущество использования стиля?
Стиль создается как ресурс с помощью объекта Style, который представляет класс System.Windows.Style. И как любой другой ресурс, он обязательно должен иметь ключ
Она не только позволяет создавать группы параметров, явно связанных между собой, но также упрощает код разметки, тем самым облегчая применение этих параметров
Что такое Command? Расскажите паттерн Command. Как в WPF используется Command и для чего?

В WPF кроме обработки событий приложение может взаимодействовать с пользователем с помощью команд. 
Команды представляют механизм выполнения какой-нибудь задачи, например, копирования текста - когда мы нажимаем Ctrl+C, то мы копируем текст в буффер. В процессе копирования выполняется ряд действий, и все вместе эти действия объединяются в одну команду. 
Использование команд помогает нам сократить объем кода и использовать одну и ту же команду для нескольких элементов управления в различных местах программы. Таким образом, команды позволяют абстрагировать набор действий от конкретных событий конкретных элементов.
В некотором роде команды в WPF являются реализацией общераспространенного паттерна Команда.

