1. Какое основное назначение технологии Windows Forms, ее особенности, преимущества и недостатки?

Windows Forms интерфейс программирования приложений (API), отвечающий за графический интерфейс пользователя и являющийся частью Microsoft .NET

Конструирование приложения. Конструирование приложения осуществляется по способу "drag and drop",
и заключается в перетаскивании захваченных мышью визуальных компонентов из окна Toolbox на форму приложения.
Форма представляет собой окно приложения с управляющими компонентами,
которые переносятся на стадии проектирования или создаются динамически в процессе работы программы.

2. Зачем используется класс Form? Назовите основные методы, свойства и события данного класса.

Представляет окно или диалоговое окно, которое составляет пользовательский интерфейс приложения.
Методы: 
Activate() - Активирует форму и перемещает на нее фокус.
AddOwnedForm(Form) - Добавляет в эту форму собственную форму.
Close() - закрывает форму.
FindForm() - Возвращает форму, в которой находится элемент управления.
Свойства: 
AcceptButton - Возвращает или задает кнопку в форме, которая срабатывает при нажатии клавиши ВВОД.
ActiveForm - Возвращает текущую активную форму для этого приложения.
AutoScaleBaseSize - Возвращает или задает базовый размер, используемый для автоматического масштабирования формы.
События:
Activated - Происходит при активизации формы, определенной в коде или заданной пользователем.
Click - Происходит при щелчке элемента управления.
Closing - Происходит при закрытии формы.

3. Поясните структуру проекта и назначение всех файлов? 

App.config - файл конфигурации приложения

Form1.Designer.cs - дизайнер формы на c#

Здесь объявляется частичный класс формы Form1, которая имеет два метода: Dispose(), который выполняет роль деструктора объекта,
и InitializeComponent(), который устанавливает начальные значения свойств формы.
При добавлении элементов управления, например, кнопок, их описание также добавляется в этот файл

Form1.resx - ресурсы формы

Хранит ресурсы формы. Как правило, ресурсы используются для создания однообразных форм сразу для нескольких языковых культур.

Form1.cs - код формы на c#

Содержит код или программную логику формы
Program.cs - точка входа в программу 

4. Зачем нужен атрибут STAThreadAttribute? 

Указывает, что потоковой моделью COM для приложения является однопотоковое подразделение.

5. Как в вашем проекте используются события и делегаты?

6. Объясните схему работы цепочек делегатов. 

7. Объясните механизм подписки и отмены подписки на события.  

8. Как создать вторую форму и передать туда данные? Есть ли другие способы? 

Чтобы добавить еще одну форму в проект, нажмем на имя проекта в окне Solution Explorer (Обозреватель решений) правой кнопкой мыши и выберем Add(Добавить)->Windows Form
Теперь добавим в него код вызова второй формы. У нас вторая форма называется Form2, поэтому сначала мы создаем объект данного класса, а потом для его отображения на экране вызываем метод Show

9. Как во время выполнения приложения добавить/удалить контрол?

1. Создайте экземпляр элемента управления, подлежащий добавлению.
2. Задайте свойства нового элемента управления.
3. Добавьте этот элемент управления в коллекцию Controls родительского элемента управления.
public Button newPanelButton = new Button();

public void addNewControl()

{

// The Add method will accept as a parameter any object that derives

// from the Control class. In this case, it is a Button control.

panel1.Controls.Add(newPanelButton);

// The event handler indicated for the Click event in the code

// below is used as an example. Substitute the appropriate event

// handler for your application.

this.newPanelButton.Click += new System.EventHandler(this. NewPanelButton_Click);

}

Удаление

1. Удалите обработчик событий из события. В Visual Basic используйте ключевое слово оператора RemoveHandler . в C#используйте оператор-=.
2. Используйте метод Remove для удаления требуемого элемента управления из коллекции Controls панели. 
3. Вызовите Dispose метод, чтобы освободить все ресурсы, используемые элементом управления. 
private void removeControl(object sender, System.EventArgs e)

{

// NOTE: The code below uses the instance of

// the button (newPanelButton) from the previous example.

if(panel1.Controls.Contains(newPanelButton))

{

this.newPanelButton.Click -= new System.EventHandler(this.

NewPanelButton_Click);

panel1.Controls.Remove(newPanelButton);

newPanelButton.Dispose();

}

}